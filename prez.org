#+TITLE: A Simple Fast Hybrid Pattern-Matching Algorithm
#+AUTHOR: Grégoire Jadi \and Noémi Salaün
#+LaTeX_CLASS: beamer
#+LANGUAGE: fr
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+OPTIONS:   H:2 toc:nil
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Env Args) %4BEAMER_col(Col) %8BEAMER_extra(Extra)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC
#+STARTUP: latexpreview
#+STARTUP: entitiespretty
* Introduction

** Introduction
*** Le problème
- Un texte T de longueur n.
- Un motif P de longueur m.
- Un alphabet \Sigma de taille k.

\rightarrow Rechercher toutes les occurrences de P dans T.

*** Les origines
- Knuth-Morris-Pratt (1977)
- Boyer-Moore (1977)

\rightarrow Depuis, plein de variations (BMH, BMG, BMS, KR, ...).

* Rappel de KMP & BM
** KMP & BM
*** Knuth-Morris-Pratt
- O(n)
- 2n - m comparaisons dans le pire des cas;

*** Boyer-Moore
- O(n)
- 3n compaisons dans le pire des cas;

*** En pratique
BM est souvent plus efficace que KMP.

* FJS
** L'algorithme FJS
*** Buts
- Borne supérieure plus faible que Boyer-Moore.
- Temps moyen plus faible que Knuth-Morris-Pratt.

*** Comment ?
- Variation de Sunday (BMS)

** Sunday's shift
#+ATTR_LATEX: :align c|cccccccccccc
| T   | a | b | c | a | b | d | a | a | c | b | a |
|-----+---+---+---+---+---+---+---+---+---+---+---|
| P   | b | c | a | a | b |   |   |   |   |   |   |
| BM  |   | b | c | a | a | b |   |   |   |   |   |
| BMS |   |   |   |   |   |   | b | c | a | a | b |

- BM :: règle du mauvais caractère appliquée au caractère courant;
- BMS :: règle du mauvais caractère appliquée au caractère en fin de
         fenêtre;

** L'algorithme FJS
#+BEGIN_SRC R
  T = "abaccabaac"
  P = "abaac"
  
  j <- 1; i <- 1; ip <- m
  while (ip <= n)
    if j <= 1
      SUNDAY_SHIFT(ip)
  
      j <- 1; i <- ip - m - 1
      KMP_MATCH(j, i)
    else
      KMP_MATCH(j, i)
    j <- betap(j); ip <- i + m - j
#+END_SRC

\rightarrow 3n - 2m comparaisons dans le pire des cas;
* Expérimentations et résultats

** Comparaison avec les meilleurs algorithmes

*** Les algorithmes utilisés

- Algorithme de Horspool (BMH)
- Algorithme de Sunday (BMS)
- Algorithme Reverse Colussi (RC)
- Algorithme Turbo-BM (TBM)

*** Méthode

- Tous implémentés en C.
- Tous exécutés sur la même machine.
- Chaque test exécuté 20 fois et le meilleur temps est conservé.

** Utilisation de 2 corpus

*** Corpus du Project Gutenberd

- Textes libres de droits.
- 1000 textes sélectionnés parmis 2434.
- Soit 446 504 073 lettres.
- Réparties dans des textes de longueur 10 115 à 4 823 268 lettres.

*** Corpus du Human Genome Project

- Extrait contenant uniquement des chaînes d'ADN.
- Alphabet des nucléotides (A, T, C et G)
- Traduit en binaire pour faire varier la taille de l'alphabet.

** Résultats sur le corpus Project Gutenberd

*** Méthode

- Motifs plus ou moins fréquents.
- Variation sur la taille du texte (0 à 2M de lettres).
- Variation sur la taille du motif (3 à 9 lettres).

*** Résultats

FJS apparait comme étant le plus rapide dans tous les cas, bien que souvent talonné par BMS et RC.

** Résultats sur le corpus Human Genome Project.

*** Méthode

- Variation de taille de l'alphabet (2 à 64 lettres).
- 20 motifs d'une longueur de 6 lettres sélectionnés aléatoirement dans le corpus.

*** Résultats

- De 0 à 3 : FJS est le moins performant.
- De 3 à 8 : FJS se situe dans le top 3.
- De 8 à 16 : FJS, RC et BMS sont quasiment confondus.
- > 16 : FJS et BMS sont en tête.

** Etudes supplémentaires

*** Le pire cas
- Texte de forme a^n.
- Motif de forme aba.
\rightarrow FJS est 4ème avec un temps moyen d'exécution 41% supérieur à RC.

*** Le motif trouvé partout
- Texte de forme a^n.
- Motif de forme a^m.
\rightarrow FJS donne les meilleurs résultats. Constant même en faisant varier
la longueur du motif.

*** Le pire cas spécifique du BM original
\rightarrow FJS clairement en tête avec un écart qui se creuse lorsque l'on
agrandi le motif.

* Variantes autour de FJS
** Gestion des caractères génériques
*** 2 types de recherches
- Indéterminée : *T*L \rightarrow ATOL
- Déterminée : *T*L \rightarrow ATAL ou OTOL

*** Première impression
Quelques soit le type de recherche choisi, les algorithmes basés sur BM sont souvent les plus performants.

** Gestion des alphabets étendus
*** Caractère Unicode

- Alphabet de 8 bits gérable.
- Alphabet sur 16 ou 32 bits compliqué à gérer.
\rightarrow Le temps de prétraitement du motif devient plus long que le temps de recherche.

*** Solution proposée
- Réduction de l'alphabet de travail à l'alphabet du motif.
- Les motifs du texte qui ne sont pas dans l'alphabet ne peuvent pas correspondre.
- Complexité identique au nouvel alphabet réduit.

* Conclusion
** Conclusion
*** Objectifs accomplis
- pire des cas :: 3n - 2m (vs 3n de BM et 2n - m de KMP);
- cas moyen et meilleur cas :: identiques à Boyer-Moore;

** Mise en perspective par Simone Faro & Thierry Lecroq (2010)
#+ATTR_LaTeX: :width \linewidth :height \textheight :options keepaspectratio
[[file:recap.png]]
