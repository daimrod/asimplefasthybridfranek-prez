#+TITLE: A Simple Fast Hybrid Pattern-Matching Algorithm
#+DATE: <2013-12-08 Sun>
#+AUTHOR: Grégoire Jadi \and Noémi Salaün
#+EMAIL: daimrod@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not LOGBOOK) date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 24.3.50.1 (Org mode 8.0.2)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: fr
#+SELECT_TAGS: export
#+STARTUP: latexpreview
#+STARTUP: entitiespretty


* Introduction
Dans leur papier, F. Franek, C. G. Jennings et W. F. Smyth présentent
une nouvelle approche au problème de recherche de chaîne exacte dans
un texte.

Ce problème, bien connu et déjà largement étudié dans la littérature
informatique, est le suivant:

#+BEGIN_QUOTE
Soit un texte T de longueur n et un motif P de longueur m tous deux
écrit dans un alphabet \Sigma de taille k, on cherche toutes les occurrences
exactes du motif dans le texte.
#+END_QUOTE

À l'origine, deux papiers définissant deux algorithmes posent les
bases sur lesquelles de nombreuses variations ont été construites,
dont l'algorithme FJS décrit dans l'article étudié. Ces deux
algorithmes sont l'algorithme Knut-Morris-Pratt (KMP) et l'algorithme
Boyer-Moore (BM).

Comme dit précédemment, les algorithmes KMP et BM appartiennent à la
grande famille des algorithmes résolvant le problème de recherche de
motif. De part leur manière d'aborder ce problème, on dit qu'ils
appartiennent à la sous-famille des algorithmes basés sur la
reconnaissance de caractères. 

Les autres approches communément employées sont les algorithmes basés
sur automates déterministes, et les algorithmes basés sur le
parallélisme de bits simulant des automates non-déterministes.

À première vu, on pourrait se demander pourquoi il existe autant de
variations autour du même problème, clairement défini, alors que les
limites théoriques sont déjà connues.

Cela tient au fait que ces algorithmes sont très utilisés dans des
conditions différentes, que ce soit en Traitement Automatique des
Langues afin de rechercher un mot dans un texte en langage naturel, ou
en Bio-Informatique afin de rechercher une séquence de gène dans
l'ADN.

Selon le cas d'utilisation, la taille des motifs recherchés et la
taille de l'alphabet vont varier. Or, ceux sont deux critères qui
peuvent grandement influencer l'efficacité des algorithmes.

Enfin, au vu des progrès fait dans la conception des CPUs, en
particulier l'accumulation de CPUs dans une même machine, fait que
certaines approches qui n'étaient pas intéressantes sur des machines
mono-CPU, deviennent très intéressantes, car facilement
parallélisable, sur des machines multi-CPUs.

* KMP et BM
Comme la plupart des algorithmes de recherche de chaîne, les
algorithmes KMP et BM effectuent un pré-traitement sur le motif. Le
but est d'extraire le maximum d'informations afin d'accélérer la
recherche du motif en minimisant le nombre de comparaison de
caractères.

** Knuth-Morris-Pratt
Le pré-traitement de l'algorithme KMP vise à extraire les sous-chaînes
les plus longues du motif qui s'aligne avec un préfixe du motif. Par
exmple dans le motif "ABCDABD", on remarque que la sous-chaînes "AB"
se trouve en ~P[1..2]~ et en ~P[5..6]~. Cette information permet de ne
pas reprendre la recherche à zéro si une comparaison échoue en ~P[7]~.

« more example »
** Boyer-Moore
Bien que le motif avance de gauche à droite, l'algorithme BM compare
le motif de droite à gauche, contrairement à l'algorithme KMP qui le
comparait de gauche à droite. Cette particularité permet à
l'algorithme BM de ne pas avoir à comporer tous les caractères du
texte dans certain cas.

« more example »

** Conclusion


* Présentation de l'algorithme FJS
L'algorithme FJS est un mixte entre l'algorithme KMP et une variation
de BM appelée Boyer-Moore-Sunday (BMS).

Le but de cette variation est d'avoir une complexité dans le pire des
cas plus faible que celle de l'algorithme BM, tout minimisant la
complexité moyenne afin de se rapprocher de celle de l'algorithme BM.

Pour cela, l'algorithme FJS garde l'approche de base de l'algorithme
KMP. C'est à dire que le motif est comparè de gauche à droite, et,
dans le cas où une occurence partielle a été trouvé, on effectue un
décalage en utilisant l'approche de l'algorithme KMP. La différence se
situe dans le cas où deux caractères différents sont trouvés et qu'il
n'y pas d'occurence partielle. Dans ce cas, on effectue un décallage
de Sunday (Sunday's shift).

* Présentation et explication des résultats

** Méthode expérimentale

Les mesures expérimentales des performances de FJS reposent principalement
sur la comparaison avec 4 autres algorithmes connus comme étant les plus
rapides.

- L'algorithme de Horspool (BMH), qui est une simplification de
  l'algorithme BM. Il permet d'obtenir la même complexité dans le
  meilleur cas et une complexité moyenne plus faible. Cependant, la
  complexité dans le pire cas est supérieur, mais ce cas reste
  particulièrement rare.

- L'algorithme de Sunday (BMS), qui a déjà été présenté précédement.

- L'algorithme Reverse Colussi (RC), qui se base lui aussi sur
  l'algorithme BM. La différence est que le prétraitement permet de
  définir un ordre optimal dans lequel comparer le motif recherché,
  plutôt que simplement de gauche à droite ou inversement.

- L'algorithme Turbo-BM (TBM). Il s'agit encore une fois d'une
  variante de l'algorithme BM. Il ne nécessite pas de prétraitement
  supplémentaire mais la variation repose sur la mémorisation des
  caractères du texte déjà comparés afin de pouvoir sauter des
  comparaisons inutiles.

On peut déjà faire remarquer que seul l'algorithme TBM permet, comme
FJS, une complexité dans le pire cas en O(n).

Pour pouvoir comparer proprement les différents algorithmes, ils ont
tous été implémentés en C. Des précautions particulières ont été prise
pour empécher des optimisations automatiques des compilateurs ou
autres éléments externe, afin d'assurer des résultats justes.

Pour mesurer le temps d'exécution d'un algorithme, il est executé 20
fois et son exécution la plus rapide est gardée comme temps de
référence. L'ensemble des algorithmes sont bien entendu exécuté sur la
même machine. Les résultats présentés sont obtenus sur une seul
machine en particulier mais ils nous assurent que les résultats sont
stables sur une grande variété de machines ou de systèmes
d'exploitations différents.

** Données utilisées

Le corpus utilisé pour les expériences est celui du Project Gutenberd
qui contient 2434 textes libres. Pour ces tests, seulement 1000 textes
ont été sélectionnés au hasard. Ce qui représente au final un corpus
de 446 504 073 lettres réparties dans des textes de tailles allant de
10 115 lettres à 4 823 268 lettres.


* Améliorations et variantes autour de FJS

* Back to the Future POV
