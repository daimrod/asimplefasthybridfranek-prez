#+TITLE: A Simple Fast Hybrid Pattern-Matching Algorithm
#+AUTHOR: Grégoire Jadi \and Noémi Salaün
#+EMAIL: daimrod@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not LOGBOOK) date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 24.3.50.1 (Org mode 8.0.2)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: fr
#+SELECT_TAGS: export
#+STARTUP: latexpreview
#+STARTUP: entitiespretty


* Introduction
Dans leur papier, F. Franek, C. G. Jennings et W. F. Smyth présentent
une nouvelle approche au problème de recherche de chaîne exacte dans
un texte.

Ce problème, bien connu et déjà largement étudié dans la littérature
informatique, est le suivant:

#+BEGIN_QUOTE
Soit un texte T de longueur n et un motif P de longueur m tous deux
écrit dans un alphabet \Sigma de taille k, on cherche toutes les occurrences
exactes du motif dans le texte.
#+END_QUOTE

À l'origine, deux papiers définissant deux algorithmes posent les
bases sur lesquelles de nombreuses variations ont été construites,
dont l'algorithme FJS décrit dans l'article étudié. Ces deux
algorithmes sont l'algorithme Knut-Morris-Pratt (KMP) et l'algorithme
Boyer-Moore (BM).

* Rappel sur KMP et BM
Comme la plupart des algorithmes de recherche de chaîne, les
algorithmes KMP et BM effectuent un prétraitement sur le motif. Le
but est d'extraire le maximum d'informations afin d'accélérer la
recherche du motif en minimisant le nombre de comparaison de
caractères.

** Knuth-Morris-Pratt
Le prétraitement de l'algorithme KMP vise à extraire les sous-chaînes
les plus longues du motif qui s'aligne avec un préfixe du motif. Par
exemple dans le motif "ABCDABD", on remarque que la sous-chaînes "AB"
se trouve en ~P[1..2]~ et en ~P[5..6]~. Cette information permet de ne
pas reprendre la recherche à zéro si une comparaison échoue en ~P[7]~.

** Boyer-Moore
Bien que le motif avance de gauche à droite, l'algorithme BM compare
le motif de droite à gauche, contrairement à l'algorithme KMP qui le
comparait de gauche à droite. Cette particularité permet à
l'algorithme BM de ne pas avoir à comparer tous les caractères du
texte dans certain cas en utilisant deux règles:
- la règle du mauvais caractère;
- la règle du bon suffixe;

* Présentation de l'algorithme FJS
L'algorithme FJS est un mixte entre l'algorithme KMP et une variation
de BM appelée Boyer-Moore-Sunday (BMS).

Le but de cette variation est d'avoir une complexité dans le pire des
cas plus faible que celle de l'algorithme BM, tout minimisant la
complexité moyenne afin de se rapprocher de celle de l'algorithme BM.

Pour cela, l'algorithme FJS garde l'approche de base de l'algorithme
KMP. C'est à dire que le motif est comparé de gauche à droite, et,
dans le cas où une occurrence partielle a été trouvé, on effectue un
décalage en utilisant l'approche de l'algorithme KMP. La différence se
situe dans le cas où deux caractères différents sont trouvés et qu'il
n'y pas d'occurrence partielle. Dans ce cas, on effectue un décalage
de Sunday (~Sunday's shift~).

** Variation de Sunday
Le décalage de Sunday (~Sunday's shift~ en anglais) est une variation
astucieuse de la règle du mauvais caractère de l'algorithme BM qui a
été introduite par Sunday dans l'algorithme Boyer-Moore-Sunday (BMS).

#+ATTR_LATEX: :align ccccccccccccc
| T   | a | b | c                | a                  | b                  | d | a | a | c | b | a |
|-----+---+---+------------------+--------------------+--------------------+---+---+---+---+---+---|
| P   | b | c | \cellcolor{red}a | \cellcolor{green}a | \cellcolor{green}b |   |   |   |   |   |   |
| BM  |   | b | c                | a                  | a                  | b |   |   |   |   |   |
| BMS |   |   |                  |                    |                    |   | b | c | a | a | b | 

Alors que l'algorithme de Boyer-Moore aligne le motif par rapport
mauvais caractère rencontré, la variation de Sunday utilise le
caractère situé juste en dehors de la fenêtre actuellement observée.
C'est ce qui permet d'effectuer un saut si important, car, durant la
phase de prétraitement, l'algorithme a remarqué qu'il n'y avait pas
de 'd' dans le motif, c'est pourquoi il peut décaler le motif de toute
sa longueur.

** Décalage de Sunday dans FJS
L'algorithme FJS va donc utiliser la variation de Sunday pour
effectuer un décalage dans le cas où aucune occurrence partielle du
motif n'a été trouvée. Pour cela, l'algorithme va comparer le dernier
caractère du motif et, soit effectuer un décalage de Sunday si les
caractères sont différents, soit appliquer l'algorithme KMP classique
si les deux caractères correspondent.

** L'algorithme FJS

Soit un texte T = "abaccabaac" et un motif P = "abaac", l'algorithme
FJS se comporte de la manière suivante:

#+ATTR_LATEX: :align c|cccccccccccccc
|        Indice | 1                        | 2                        | 3                        | 4                   | 5                       | 6                        | 7                        | 8                        | 9                        | 10                      |
| Étape \ Texte | a                        | b                        | a                        | c                   | c                       | a                        | b                        | a                        | a                        | c                       |
|---------------+--------------------------+--------------------------+--------------------------+---------------------+-------------------------+--------------------------+--------------------------+--------------------------+--------------------------+-------------------------|
|             1 | \cellcolor{YellowGreen}a | \cellcolor{YellowGreen}b | \cellcolor{YellowGreen}a | \cellcolor{orange}a | \cellcolor{OliveGreen}c |                          |                          |                          |                          |                         |
|             2 |                          |                          | a                        | \cellcolor{orange}b | a                       | a                        | c                        |                          |                          |                         |
|             3 |                          |                          |                          |                     | a                       | b                        | a                        | a                        | \cellcolor{red}c         |                         |
|             4 |                          |                          |                          |                     |                         | \cellcolor{YellowGreen}a | \cellcolor{YellowGreen}b | \cellcolor{YellowGreen}a | \cellcolor{YellowGreen}a | \cellcolor{OliveGreen}c |

À l'étape 1, on applique l'algorithme KMP classique car le dernier
caractère du motif correspond au dernier caractère de la fenêtre
(~T[5]~ = ~P[5]~ en vert foncé). Lorsque l'on trouve deux caractères
différents (~T[4]~ \neq ~P[4]~ en orange). On utilise le délage de
l'algorithme KMP qui utilise la table des suffixes propres.

À l'étape suivante, comme on avait une occurence partielle, on retente
avec l'algorithme KMP, malheuresement, les caractères diffèrent de
nouveau (~T[4]~ \neq ~P[2]~ en orange).

À l'étape 3, on décale entièrement le motif et l'on tente l'approche
Sunday. Encore une fois, les caractères diffères (~T[9]~ \neq ~P[5]~ en
rouge) et un nouveau décalage est effectué.

À l'étape finale, le test de Sunday réussi (~T[10]~ = ~P[5]~) et il en
va de même pour l'algorithme KMP. On a donc trouvé le motif.

* Présentation et explication des résultats

** Méthode expérimentale

Les mesures expérimentales des performances de FJS reposent principalement
sur la comparaison avec 4 autres algorithmes connus comme étant les plus
rapides.

- L'algorithme de Horspool (BMH), qui est une simplification de
  l'algorithme BM. Il permet d'obtenir la même complexité dans le
  meilleur cas et une complexité moyenne plus faible. Cependant, la
  complexité dans le pire cas est supérieur, mais ce cas reste
  particulièrement rare.

- L'algorithme de Sunday (BMS), qui a déjà été présenté précédemment.

- L'algorithme Reverse Colussi (RC), qui se base lui aussi sur
  l'algorithme BM. La différence est que le prétraitement permet de
  définir un ordre optimal dans lequel comparer le motif recherché,
  plutôt que simplement de gauche à droite ou inversement.

- L'algorithme Turbo-BM (TBM). Il s'agit encore une fois d'une
  variante de l'algorithme BM. Il ne nécessite pas de prétraitement
  supplémentaire mais la variation repose sur la mémorisation des
  caractères du texte déjà comparés afin de pouvoir sauter des
  comparaisons inutiles.

On peut déjà faire remarquer que seul l'algorithme TBM permet, comme
FJS, une complexité dans le pire cas en O(n).

Pour pouvoir comparer proprement les différents algorithmes, ils ont
tous été implémentés en C. Des précautions particulières ont été prises
pour empêcher des optimisations automatiques des compilateurs ou
autres éléments externe, afin d'assurer des résultats justes.

Pour mesurer le temps d'exécution d'un algorithme, il est exécuté 20
fois et son exécution la plus rapide est gardée comme temps de
référence. L'ensemble des algorithmes sont bien entendu exécutés sur la
même machine. Les résultats présentés sont obtenus sur une seule
machine en particulier mais ils nous assurent que les résultats sont
stables sur une grande variété de machines ou de systèmes
d'exploitations différents.

** Données utilisées

2 corpus bien différent ont été utilisés, l'un en texte normal et
l'autre avec l'alphabet de l'ADN.

  - Le corpus de texte est celui du Project Gutenberd qui contient 2434
    textes libres. Pour ces tests, seulement 1000 textes ont été
    sélectionnés au hasard. Ce qui représente au final un corpus de
    446 504 073 lettres réparties dans des textes de tailles allant de
    10 115 lettres à 4 823 268 lettres.

    Pour ce corpus, les expérimentations ont été menées avec des motifs
    recherchés apparaissant très fréquemment, et d'autre avec des motifs
    moins communs pour étudier l'impact de la découverte d'un motif complet.

  - Le second corpus sur l'ADN est extrait du Human Genome Project. Seul
    les chaînes purement ADN ont été conservées afin de pouvoir travailler
    sur l'alphabet des nucléotides (A, T, C et G) uniquement. Le corpus
    est ensuite traduit en binaire (A = 00, T = 01, ...) afin de pouvoir
    extraire des alphabets de taille variable en faisant varier le nombre de
    bits par lettre.

** Résultats

Les expérimentations menées sur le corpus Gutenberd ont permis d'isoler
plusieurs variations :
  - En faisant varier la taille du texte d'une longueur de 0 à 2 millions
    de lettres, et en cherchant d'abord des motifs fréquents puis des
    motifs moins fréquents. On constate que l'algorithme FJS est le meilleur
    bien que quasiment équivalent à BMS et RC.

  - En faisant varier la taille du motif de 3 à 9 lettres et en recherchant
    sur l'ensemble du corpus, on constate que l'algorithme FJS est encore une
    fois le meilleur suivi de près par BMS.

Le corpus ADN a permis d'étudier les variations de taille sur l'alphabet. On
constate alors des résultats très différents des précédents. En effet, pour
un alphabet de taille inférieure à 4, l'algorithme FJS est le moins performants
et c'est en travaillant avec un alphabet de taille supérieur à 8 que l'on
retrouve les 3 algorithmes habituels en tête avec FJS, BMS et RC. Cependant,
en continuant d'agrandir l'alphabet, l'algorithme RC devient de moins en moins
performant jusqu'à devenir dernier avec une taille supérieures à 30.

Une étude supplémentaire a été menée sur des cas particuliers :
  - Le pire cas de recherche de chaîne, avec T = a^n et P = aba. L'algorithme FJS
    se retrouve alors en quatrième position avec un temps d'exécution moyen 41%
    supérieur à l'algorithme RC classé premier.

  - Le cas où le motif est trouvé à toutes les positions, avec T = a^n et P = a^m.
    L'algorithme FJS donne alors les meilleurs performances, constantes malgré
    les modifications de la taille du motif.

  - Le pire cas spécifique pour l'algorithme BM original. Encore une fois, FJS
    termine en tête des tests avec un écart qui se creuse lorsque l'on agrandi
    le motif.

* Améliorations et variantes autour de FJS

** Gestion des caractères génériques

L'une des variations les plus intéressantes est le support des caractères génériques
qui peuvent correspondre alors à n'importe quelle lettre de l’alphabet ou à un
sous-ensemble. Pour traiter ce genre de recherche, il existe alors deux catégories :
  - Indéterminée : Le caractère générique n’est pas obligé de correspondre toujours
    à la même lettre pour un même motif comparé. Par exemple *T*L peut correspondre à ATOL.

  - Déterminée : Il s’agit du cas inverse. Le caractère générique doit correspondre
    à une même lettre pour  un motif donné. ATOL ne correspond alors plus, mais ATAL oui.

Que ce soit pour des recherches déterminées ou indéterminées, il est fréquent que
les algorithmes basés sur BM soit les plus performants. L’algorithme FJS appartient
donc à cette catégorie mais une étude approfondie serait nécessaire pour donner
des résultats concrets.

** Gestion des alphabets étendus

La plupart des textes utilisent un alphabet pouvant être encodé sur 8 bits. Cependant,
l'utilisation de caractères spéciaux peut entraîner l'utilisation de l'Unicode et donc
d'un alphabet sur 16 voire 32 bits. Le temps de prétraitement d’un tel alphabet réduit
alors à néant toutes les tentatives d’optimisation de la recherche.

L’une des méthodes proposées est de réduire l’alphabet à celui utilisé dans le motif
et définir tous les autres caractères du texte comme incompatible et donc sans
correspondance. Cette méthode permet alors de rechercher une chaine de caractère
ASCII dans un texte en Unicode en se basant uniquement sur l’alphabet de 256 caractères
du motif. L’algorithme peut alors fournir des performances identique à une recherche
sur un texte entièrement en ASCII.

* Conclusion

Comme expliqué précédemment, les algorithmes KMP et BM appartiennent à
la grande famille des algorithmes résolvant le problème de recherche
de motif. De par leur manière d'aborder ce problème, on dit qu'ils
appartiennent à la sous-famille des algorithmes basés sur la
reconnaissance de caractères.

Les autres approches communément employées sont les algorithmes basés
sur automates déterministes, et les algorithmes basés sur le
parallélisme de bits simulant des automates non-déterministes.

À première vue, on pourrait se demander pourquoi il existe autant de
variations autour du même problème, clairement défini, alors que les
limites théoriques sont déjà connues.

Cela tient au fait que ces algorithmes sont très utilisés dans des
conditions différentes, que ce soit en Traitement Automatique des
Langues afin de rechercher un mot dans un texte en langage naturel, ou
en Bio-Informatique afin de rechercher une séquence de gêne dans
l'ADN.

Selon le cas d'utilisation, la taille des motifs recherchés et la
taille de l'alphabet vont varier. Or, ceux sont deux critères qui
peuvent grandement influencer l'efficacité des algorithmes.

Enfin, au vu des progrès fait dans la conception des CPUs, en
particulier l'accumulation de CPUs dans une même machine, fait que
certaines approches qui n'étaient pas intéressantes sur des machines
mono-CPU, deviennent très intéressantes, car facilement
parallélisable, sur des machines multi-CPUs.
